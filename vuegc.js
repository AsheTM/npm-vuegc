#! /usr/bin/env node
// Requirement
const 
    fs          = require("fs"), 
    path        = require("path"), 
    Handlebars  = require("handlebars");


// Util Functions
function getValueof(flag, obj = Object) {
    let thatValue   = null,  
        match       = false;
    args.forEach(value => {
        if(match)
            if(value.startsWith("--"))
                thatValue = true;
            else
                thatValue = value;
        match = (value == obj(flag));
    });
    return thatValue;
}
function errorHandler(err) {
    let exit = err.exit;
    switch(err.errno) {
        case -4075:
            console.log("\t[!] Folder already exists [!]");
            break;
        case -4058: 
            console.log("\t[!] It is not the root of Vue project [!]");
            exit = true;
            break;
        case 0x0001: 
            console.log("\t[!] main.js of Vue Project not found [!]");
            exit = true;
            break;
        case 0x0002: 
            console.log("\t[!] App.vue of Vue Project not found [!]");
            exit = true;
            break;
        case 0x0003: 
            console.log(`\t[!] Flag ${ err.flag } required [!]`);
            exit = true;
            break;
        default: 
            console.error(err);
            exit = true;
            break;
    }
    // If error spotted
    if(exit) {
        console.log("> Generating vue component failure");
        process.exit();
    }
}
function checkRequiredArgs() {
    try {
        for(let arg in requiredArgs) 
            if(requiredArgs[arg] == null)
                throw { errno: 0x0003, msg: "Flag " + arg + " required", flag: arg, exit: true };
    } catch(err) {
        errorHandler(err);
    }
}
function registerHelpers() {
    const componentFileName = requiredArgs.name.toCapitalize();
    Handlebars.registerHelper("defaultStyle", function(text, url) {
        const spanStyle = "span{ font-weight: bold; }";
        const aStyle = "a{ font-style: italic; }";
        let result = `#${ componentFileName }{
    \tfont-size: 16px;
    \tline-height: 150%;${ supported.style.includes(optionalArgs.style.style) && optionalArgs.style.style != "css" 
            ? "\n\t\t" + spanStyle + "\n\t\t" + aStyle 
            : "" }
    }${ optionalArgs.style.style == "css" ? "\n" + spanStyle + "\n" + aStyle : "" }`;
        return new Handlebars.SafeString(result);
    }); 
    Handlebars.registerHelper("defaultScript", function(text, url) {
        let result = `export default {
    name: "${ componentFileName }", 
    props: { }, 
    data() { }, 
    methods() { }
}`;
        return new Handlebars.SafeString(result);
    });
    Handlebars.registerHelper("defaultTemplate", function(text, url) {
        let result = `<div id="${ componentFileName }"> Component <span>${ componentFileName }</span> generated by <a href="">VueGC</a> </div>`;
        return new Handlebars.SafeString(result);
    });
}


// Util Prototypes
String.prototype.toCapitalize = function() { return this.charAt(0).toUpperCase() + this.substr(1).toLowerCase(); }
    

// Main Constants
const 
    pathLaunchedCmd     = process.cwd(), 
    fileName            = {
        "main.js": "main.js", 
        "App.vue": "App.vue"
    }, 
    rootVueProject      = {
        "main.js":  path.join(pathLaunchedCmd, './src/', fileName['main.js']), 
        "App.vue":  path.join(pathLaunchedCmd, './src/', fileName['App.vue'])
    }, 
    nodeFile            = process.argv[0], 
    vuegcFile           = process.argv[1], 
    args                = process.argv.filter((value, index) => index >= 2), 
    requiredArgs        = {
        name:   getValueof("--name", String), 
    }, 
    serviceArgs         = {
        help:   getValueof("--help", Boolean) || args.length == 0
    }, 
    optionalArgs        = {
        template:   {
            // 
        }, 
        script:     {
            // 
        }, 
        style:      {
            scoped: getValueof("--scoped", Boolean) || true, 
            style:  getValueof("--style", String)   || "scss", 
        }
    }, 
    supported           = {
        style:  ["css", "scss", "stylus"]
    };

function vuegc() {
    // Checking for existing of all required arguments
    checkRequiredArgs();

    // Initializing
    const 
        componentName       = requiredArgs.name.endsWith(".vue") && requiredArgs.name || (requiredArgs.name + ".vue"), 
        pathComponent       = path.join(pathLaunchedCmd, "./src/", componentName), 
        sourceTemplate      = fs.readFileSync(path.join(__dirname, "./Template.vue.sample"), { encoding: 'utf-8' }), 
        compileTemplate     = Handlebars.compile(sourceTemplate), 
        dataTemplate        = {
            style:  optionalArgs.style.style, 
            scoped: optionalArgs.style.scoped ? ' scoped' : ''
        };
    
    // Preparing template/script/style
    registerHelpers();
    
    // Start to generating vue component
    console.log("> Generating vue component starting");

    // Checking if I'm in the root of Vue project
    try {
        let content = {
            "main.js": fs.readFileSync(rootVueProject["main.js"], { encoding: 'utf-8' }), 
            "App.vue": fs.readFileSync(rootVueProject["App.vue"], { encoding: 'utf-8' })
        };
        if(!content[fileName["main.js"]].match(/(new Vue)|(from 'vue')|Vue\./gi))
            throw { errno: 0x0001, msg: "\t[!] main.js of Vue Project not found [!]", exit: true };
        if(!content[fileName["App.vue"]].match(/(template)|(script)|(style)/gi))
            throw { errno: 0x0002, msg: "\t[!] App.vue of Vue Project not found [!]", exit: true };
    } catch(err) {
        errorHandler(err);
    }

    // Creating the folders for the component
    try {
        fs.mkdirSync(path.join(pathLaunchedCmd, "./src/"));
        console.log("\t [!] New folder(s) created [!]");
    } catch(err) {
        errorHandler(err);
    }

    // Creating the component
    try {
        fs.writeFileSync(pathComponent, compileTemplate(dataTemplate));
    } catch(err) {
        errorHandler(err);
    }

    // Generation vue component done
    console.log("> Generating vue component success");
}

function vuegcHelp() {
    console.log(`
__       __  _    _    ______     _____     ____
\\ \\     / / | |  | |  |  ____|   / ____|   /  __|
 \\ \\   / /  | |  | |  | |___    / /   __  |  /    
  \\ \\ / /   | |  | |  |  ___|   | |  |_ | | |    
   \\ v /    | |__| |  | |____   \\ \\___/ / |  \\__ 
    \\_/     \\______/  |______|   \\_____/   \\____|

vuegc --name HelloWord.vue [--scoped [true|false] [--style css]]

Required flag(s):
--name: Name of the component

Optional flag(s):
--scoped: Boolean for scoped tag on style inside the file.vue [Default: true]
--style: Pre-processor CSS [Default: css] [Value supported: css, scss, stylus]
`);
}

if(serviceArgs.help) 
    vuegcHelp();
else
    vuegc();
