#! /usr/bin/env node
// Requirement
const 
    fs      = require("fs"), 
    path    = require("path");


// Util Functions
function getValueof(flag, obj = Object) {
    let thatValue   = null,  
        match       = false;
    args.forEach(value => {
        if(match)
            if(value.startsWith("--"))
                thatValue = true;
            else
                thatValue = value;
        match = (value == obj(flag));
    });
    return thatValue;
}


// Util Prototypes
String.prototype.toCapitalize = function() {
    return this.charAt(0).toUpperCase() + this.substr(1).toLowerCase();
}
    

// Main Constants
const 
    pathLaunchedCmd     = process.cwd(), 
    rootVueProject      = path.join(pathLaunchedCmd, './src/', 'main.js'), 
    args                = process.argv.filter((value, index) => index >= 2), 
    nodeFile            = process.argv[0], 
    vuegcFile           = process.argv[1], 
    requiredArgs        = {
        name:   getValueof("--name", String), 
    }, 
    optionalArgs        = {
        file:       {
            path:   getValueof("--path", String)    || './component/', 
        }, 
        template:   {
            // 
        }, 
        script:     {
            // 
        }, 
        style:      {
            scoped: getValueof("--scoped", Boolean) || true, 
            style:  getValueof("--style", String)   || "scss", 
        }
    }, 
    supported           = {
        style:  ["css", "scss", "stylus"]
    }


async function vuegc() {
    try {
        
        // Checking for existing of all requried arguments
        for(let arg in requiredArgs) {
            if(requiredArgs[arg] == null)
                throw new Error("Flag " + arg + " required");
        }
    
        // Initializing
        const 
            componentFileName   = requiredArgs.name.toCapitalize(), 
            spanStyle           = `\tspan{ font-weight: bold; }`, 
            aStyle              = `\ta{ font-style: italic; }`, 
            containerIdStyle    = `#${ componentFileName }{
    \tfont-size: 16px;
    \tline-height: 150%;${ supported.style.includes(optionalArgs.style.style) && optionalArgs.style.style != "css" 
            ? "\n\t" + spanStyle + "\n\t" + aStyle 
            : "" }
    }${ optionalArgs.style.style == "css" ? "\n" + spanStyle + "\n" + aStyle : "" }`, 
    
/************* Begin Style      *************/
            style               = `
<style${ ' lang="' + optionalArgs.style.style +'"' }${ optionalArgs.style.scoped == true && ' scoped' || ''}>
    ${ containerIdStyle }
</style>`, 
/************* End Style        *************/

/************* Begin Script     *************/
            script              = `
<script>
export default {
    name: "${ componentFileName }", 
    props: { }, 
    data() { }, 
    methods() { }
}
</script>`, 
/************* End Script       *************/

/************* Begin Template   *************/
            template            = `
<template>
    <div id="${ componentFileName }"> Component <span>${ componentFileName }</span> generated by <a href="">VueGC</a> </div>
</template>`, 
/************* End Template     *************/

/************* Begin Component: Tempalte + Script + Style */
            componentContent    = `${ template }\n${ script }\n${ style }\n`, 
/************* End Component    *************/

            componentName       = requiredArgs.name.endsWith(".vue") && requiredArgs.name || (requiredArgs.name + ".vue"), 
            pathSrc             = path.join(pathLaunchedCmd, "./src/"), 
            pathComponent       = path.join(pathSrc, optionalArgs.file.path, componentName);
    
        // Start to generating vue component
        console.log("> Generating vue component starting");
    
        // Checking if I'm in the root of Vue project
        let content = fs.readFileSync(rootVueProject, { encoding: 'utf-8' });
        if(!content.match(/(new Vue)|(from 'vue')|Vue\./gi))
            throw new Error("It is not the root of Vue project");
        console.log("   This a root of Vue Project");
    
        // Creating the folders for the component
        fs.mkdirSync(path.join(pathLaunchedCmd, "./src/", optionalArgs.file.path), err => {
            if(err)
                throw err;
            console.log("   New folder(s) created");
        });
    
        // Creating the component
        fs.writeFileSync(pathComponent, componentContent);
    
        // Generate vue component done
        console.log("> Generating vue component success");

    } catch(err) {

        // If error spotted
        console.log("> Generating vue component failure");
        console.log("\n");
        console.error(err);
        process.exit();

    }
}

vuegc();
